/*
 * This file is generated by jOOQ.
 */
package io.github.yusufsdiscordbot.mystigurdian.db.tables.records;


import io.github.yusufsdiscordbot.mystigurdian.db.tables.Oauth;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OauthRecord extends UpdatableRecordImpl<OauthRecord> implements Record6<String, String, String, String, Long, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.oauth.access_token</code>.
     */
    public OauthRecord setAccessToken(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.oauth.access_token</code>.
     */
    public String getAccessToken() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.oauth.refresh_token</code>.
     */
    public OauthRecord setRefreshToken(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.oauth.refresh_token</code>.
     */
    public String getRefreshToken() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.oauth.user_json</code>.
     */
    public OauthRecord setUserJson(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.oauth.user_json</code>.
     */
    public String getUserJson() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.oauth.user_id</code>.
     */
    public OauthRecord setUserId(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.oauth.user_id</code>.
     */
    public String getUserId() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.oauth.id</code>.
     */
    public OauthRecord setId(Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.oauth.id</code>.
     */
    public Long getId() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>public.oauth.expires_in</code>.
     */
    public OauthRecord setExpiresIn(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.oauth.expires_in</code>.
     */
    public String getExpiresIn() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, String, Long, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<String, String, String, String, Long, String> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Oauth.OAUTH.ACCESS_TOKEN;
    }

    @Override
    public Field<String> field2() {
        return Oauth.OAUTH.REFRESH_TOKEN;
    }

    @Override
    public Field<String> field3() {
        return Oauth.OAUTH.USER_JSON;
    }

    @Override
    public Field<String> field4() {
        return Oauth.OAUTH.USER_ID;
    }

    @Override
    public Field<Long> field5() {
        return Oauth.OAUTH.ID;
    }

    @Override
    public Field<String> field6() {
        return Oauth.OAUTH.EXPIRES_IN;
    }

    @Override
    public String component1() {
        return getAccessToken();
    }

    @Override
    public String component2() {
        return getRefreshToken();
    }

    @Override
    public String component3() {
        return getUserJson();
    }

    @Override
    public String component4() {
        return getUserId();
    }

    @Override
    public Long component5() {
        return getId();
    }

    @Override
    public String component6() {
        return getExpiresIn();
    }

    @Override
    public String value1() {
        return getAccessToken();
    }

    @Override
    public String value2() {
        return getRefreshToken();
    }

    @Override
    public String value3() {
        return getUserJson();
    }

    @Override
    public String value4() {
        return getUserId();
    }

    @Override
    public Long value5() {
        return getId();
    }

    @Override
    public String value6() {
        return getExpiresIn();
    }

    @Override
    public OauthRecord value1(String value) {
        setAccessToken(value);
        return this;
    }

    @Override
    public OauthRecord value2(String value) {
        setRefreshToken(value);
        return this;
    }

    @Override
    public OauthRecord value3(String value) {
        setUserJson(value);
        return this;
    }

    @Override
    public OauthRecord value4(String value) {
        setUserId(value);
        return this;
    }

    @Override
    public OauthRecord value5(Long value) {
        setId(value);
        return this;
    }

    @Override
    public OauthRecord value6(String value) {
        setExpiresIn(value);
        return this;
    }

    @Override
    public OauthRecord values(String value1, String value2, String value3, String value4, Long value5, String value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OauthRecord
     */
    public OauthRecord() {
        super(Oauth.OAUTH);
    }

    /**
     * Create a detached, initialised OauthRecord
     */
    public OauthRecord(String accessToken, String refreshToken, String userJson, String userId, Long id, String expiresIn) {
        super(Oauth.OAUTH);

        setAccessToken(accessToken);
        setRefreshToken(refreshToken);
        setUserJson(userJson);
        setUserId(userId);
        setId(id);
        setExpiresIn(expiresIn);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised OauthRecord
     */
    public OauthRecord(io.github.yusufsdiscordbot.mystigurdian.db.tables.pojos.Oauth value) {
        super(Oauth.OAUTH);

        if (value != null) {
            setAccessToken(value.getAccessToken());
            setRefreshToken(value.getRefreshToken());
            setUserJson(value.getUserJson());
            setUserId(value.getUserId());
            setId(value.getId());
            setExpiresIn(value.getExpiresIn());
            resetChangedOnNotNull();
        }
    }
}
