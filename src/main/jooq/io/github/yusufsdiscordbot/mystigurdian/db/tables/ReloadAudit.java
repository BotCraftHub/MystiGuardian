/*
 * This file is generated by jOOQ.
 */
package io.github.yusufsdiscordbot.mystigurdian.db.tables;


import io.github.yusufsdiscordbot.mystigurdian.db.Public;
import io.github.yusufsdiscordbot.mystigurdian.db.tables.records.ReloadAuditRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ReloadAudit extends TableImpl<ReloadAuditRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.reload_audit</code>
     */
    public static final ReloadAudit RELOAD_AUDIT = new ReloadAudit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReloadAuditRecord> getRecordType() {
        return ReloadAuditRecord.class;
    }

    /**
     * The column <code>public.reload_audit.reason</code>.
     */
    public final TableField<ReloadAuditRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.reload_audit.user_id</code>.
     */
    public final TableField<ReloadAuditRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.reload_audit.id</code>.
     */
    public final TableField<ReloadAuditRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT, this, "");

    private ReloadAudit(Name alias, Table<ReloadAuditRecord> aliased) {
        this(alias, aliased, null);
    }

    private ReloadAudit(Name alias, Table<ReloadAuditRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.reload_audit</code> table reference
     */
    public ReloadAudit(String alias) {
        this(DSL.name(alias), RELOAD_AUDIT);
    }

    /**
     * Create an aliased <code>public.reload_audit</code> table reference
     */
    public ReloadAudit(Name alias) {
        this(alias, RELOAD_AUDIT);
    }

    /**
     * Create a <code>public.reload_audit</code> table reference
     */
    public ReloadAudit() {
        this(DSL.name("reload_audit"), null);
    }

    public <O extends Record> ReloadAudit(Table<O> child, ForeignKey<O, ReloadAuditRecord> key) {
        super(child, key, RELOAD_AUDIT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public ReloadAudit as(String alias) {
        return new ReloadAudit(DSL.name(alias), this);
    }

    @Override
    public ReloadAudit as(Name alias) {
        return new ReloadAudit(alias, this);
    }

    @Override
    public ReloadAudit as(Table<?> alias) {
        return new ReloadAudit(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReloadAudit rename(String name) {
        return new ReloadAudit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReloadAudit rename(Name name) {
        return new ReloadAudit(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReloadAudit rename(Table<?> name) {
        return new ReloadAudit(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
