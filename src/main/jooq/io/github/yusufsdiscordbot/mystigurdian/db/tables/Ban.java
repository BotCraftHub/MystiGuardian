/*
 * This file is generated by jOOQ.
 */
package io.github.yusufsdiscordbot.mystigurdian.db.tables;


import io.github.yusufsdiscordbot.mystigurdian.db.Keys;
import io.github.yusufsdiscordbot.mystigurdian.db.Public;
import io.github.yusufsdiscordbot.mystigurdian.db.tables.records.BanRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ban extends TableImpl<BanRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ban</code>
     */
    public static final Ban BAN = new Ban();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BanRecord> getRecordType() {
        return BanRecord.class;
    }

    /**
     * The column <code>public.ban.reason</code>.
     */
    public final TableField<BanRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.ban.user_id</code>.
     */
    public final TableField<BanRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.ban.guild_id</code>.
     */
    public final TableField<BanRecord, String> GUILD_ID = createField(DSL.name("guild_id"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.ban.id</code>.
     */
    public final TableField<BanRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ban.time</code>.
     */
    public final TableField<BanRecord, OffsetDateTime> TIME = createField(DSL.name("time"), SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    private Ban(Name alias, Table<BanRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ban(Name alias, Table<BanRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ban</code> table reference
     */
    public Ban(String alias) {
        this(DSL.name(alias), BAN);
    }

    /**
     * Create an aliased <code>public.ban</code> table reference
     */
    public Ban(Name alias) {
        this(alias, BAN);
    }

    /**
     * Create a <code>public.ban</code> table reference
     */
    public Ban() {
        this(DSL.name("ban"), null);
    }

    public <O extends Record> Ban(Table<O> child, ForeignKey<O, BanRecord> key) {
        super(child, key, BAN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BanRecord> getPrimaryKey() {
        return Keys.PK_BAN;
    }

    @Override
    public List<UniqueKey<BanRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UK_BAN);
    }

    @Override
    public Ban as(String alias) {
        return new Ban(DSL.name(alias), this);
    }

    @Override
    public Ban as(Name alias) {
        return new Ban(alias, this);
    }

    @Override
    public Ban as(Table<?> alias) {
        return new Ban(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ban rename(String name) {
        return new Ban(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ban rename(Name name) {
        return new Ban(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ban rename(Table<?> name) {
        return new Ban(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, Long, OffsetDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
