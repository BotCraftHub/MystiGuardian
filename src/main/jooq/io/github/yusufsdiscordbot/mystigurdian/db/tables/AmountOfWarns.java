/*
 * This file is generated by jOOQ.
 */
package io.github.yusufsdiscordbot.mystigurdian.db.tables;


import io.github.yusufsdiscordbot.mystigurdian.db.Public;
import io.github.yusufsdiscordbot.mystigurdian.db.tables.records.AmountOfWarnsRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class AmountOfWarns extends TableImpl<AmountOfWarnsRecord> {

    /**
     * The reference instance of <code>public.amount_of_warns</code>
     */
    public static final AmountOfWarns AMOUNT_OF_WARNS = new AmountOfWarns();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>public.amount_of_warns.amount_of_warns</code>.
     */
    public final TableField<AmountOfWarnsRecord, Integer> AMOUNT_OF_WARNS_ = createField(DSL.name("amount_of_warns"), SQLDataType.INTEGER, this, "");
    /**
     * The column <code>public.amount_of_warns.user_id</code>.
     */
    public final TableField<AmountOfWarnsRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(256), this, "");
    /**
     * The column <code>public.amount_of_warns.guild_id</code>.
     */
    public final TableField<AmountOfWarnsRecord, String> GUILD_ID = createField(DSL.name("guild_id"), SQLDataType.VARCHAR(256), this, "");
    /**
     * The column <code>public.amount_of_warns.id</code>.
     */
    public final TableField<AmountOfWarnsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT, this, "");

    private AmountOfWarns(Name alias, Table<AmountOfWarnsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AmountOfWarns(Name alias, Table<AmountOfWarnsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.amount_of_warns</code> table reference
     */
    public AmountOfWarns(String alias) {
        this(DSL.name(alias), AMOUNT_OF_WARNS);
    }

    /**
     * Create an aliased <code>public.amount_of_warns</code> table reference
     */
    public AmountOfWarns(Name alias) {
        this(alias, AMOUNT_OF_WARNS);
    }

    /**
     * Create a <code>public.amount_of_warns</code> table reference
     */
    public AmountOfWarns() {
        this(DSL.name("amount_of_warns"), null);
    }

    public <O extends Record> AmountOfWarns(Table<O> child, ForeignKey<O, AmountOfWarnsRecord> key) {
        super(child, key, AMOUNT_OF_WARNS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AmountOfWarnsRecord> getRecordType() {
        return AmountOfWarnsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public AmountOfWarns as(String alias) {
        return new AmountOfWarns(DSL.name(alias), this);
    }

    @Override
    public AmountOfWarns as(Name alias) {
        return new AmountOfWarns(alias, this);
    }

    @Override
    public AmountOfWarns as(Table<?> alias) {
        return new AmountOfWarns(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AmountOfWarns rename(String name) {
        return new AmountOfWarns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AmountOfWarns rename(Name name) {
        return new AmountOfWarns(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AmountOfWarns rename(Table<?> name) {
        return new AmountOfWarns(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
