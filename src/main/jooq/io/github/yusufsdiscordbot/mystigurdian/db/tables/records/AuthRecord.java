/*
 * This file is generated by jOOQ.
 */
package io.github.yusufsdiscordbot.mystigurdian.db.tables.records;


import io.github.yusufsdiscordbot.mystigurdian.db.tables.Auth;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthRecord extends UpdatableRecordImpl<AuthRecord> implements Record2<Long, byte[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.auth.id</code>.
     */
    public AuthRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.auth.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.auth.auth_class</code>.
     */
    public AuthRecord setAuthClass(byte[] value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.auth.auth_class</code>.
     */
    public byte[] getAuthClass() {
        return (byte[]) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, byte[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, byte[]> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Auth.AUTH.ID;
    }

    @Override
    public Field<byte[]> field2() {
        return Auth.AUTH.AUTH_CLASS;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public byte[] component2() {
        return getAuthClass();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public byte[] value2() {
        return getAuthClass();
    }

    @Override
    public AuthRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public AuthRecord value2(byte[] value) {
        setAuthClass(value);
        return this;
    }

    @Override
    public AuthRecord values(Long value1, byte[] value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AuthRecord
     */
    public AuthRecord() {
        super(Auth.AUTH);
    }

    /**
     * Create a detached, initialised AuthRecord
     */
    public AuthRecord(Long id, byte[] authClass) {
        super(Auth.AUTH);

        setId(id);
        setAuthClass(authClass);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised AuthRecord
     */
    public AuthRecord(io.github.yusufsdiscordbot.mystigurdian.db.tables.pojos.Auth value) {
        super(Auth.AUTH);

        if (value != null) {
            setId(value.getId());
            setAuthClass(value.getAuthClass());
            resetChangedOnNotNull();
        }
    }
}
