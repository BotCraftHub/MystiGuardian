/*
 * This file is generated by jOOQ.
 */
package io.github.yusufsdiscordbot.mystigurdian.db.tables;


import io.github.yusufsdiscordbot.mystigurdian.db.Keys;
import io.github.yusufsdiscordbot.mystigurdian.db.Public;
import io.github.yusufsdiscordbot.mystigurdian.db.tables.records.WarnsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Warns extends TableImpl<WarnsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.warns</code>
     */
    public static final Warns WARNS = new Warns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WarnsRecord> getRecordType() {
        return WarnsRecord.class;
    }

    /**
     * The column <code>public.warns.reason</code>.
     */
    public final TableField<WarnsRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.warns.user_id</code>.
     */
    public final TableField<WarnsRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.warns.guild_id</code>.
     */
    public final TableField<WarnsRecord, String> GUILD_ID = createField(DSL.name("guild_id"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.warns.id</code>.
     */
    public final TableField<WarnsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.warns.time</code>.
     */
    public final TableField<WarnsRecord, OffsetDateTime> TIME = createField(DSL.name("time"), SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    private Warns(Name alias, Table<WarnsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Warns(Name alias, Table<WarnsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.warns</code> table reference
     */
    public Warns(String alias) {
        this(DSL.name(alias), WARNS);
    }

    /**
     * Create an aliased <code>public.warns</code> table reference
     */
    public Warns(Name alias) {
        this(alias, WARNS);
    }

    /**
     * Create a <code>public.warns</code> table reference
     */
    public Warns() {
        this(DSL.name("warns"), null);
    }

    public <O extends Record> Warns(Table<O> child, ForeignKey<O, WarnsRecord> key) {
        super(child, key, WARNS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<WarnsRecord> getPrimaryKey() {
        return Keys.PK_WARNS;
    }

    @Override
    public List<UniqueKey<WarnsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UK_WARNS);
    }

    @Override
    public Warns as(String alias) {
        return new Warns(DSL.name(alias), this);
    }

    @Override
    public Warns as(Name alias) {
        return new Warns(alias, this);
    }

    @Override
    public Warns as(Table<?> alias) {
        return new Warns(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Warns rename(String name) {
        return new Warns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Warns rename(Name name) {
        return new Warns(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Warns rename(Table<?> name) {
        return new Warns(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, Long, OffsetDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
