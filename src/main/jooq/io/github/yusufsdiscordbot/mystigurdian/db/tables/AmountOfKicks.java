/*
 * This file is generated by jOOQ.
 */
package io.github.yusufsdiscordbot.mystigurdian.db.tables;


import io.github.yusufsdiscordbot.mystigurdian.db.Keys;
import io.github.yusufsdiscordbot.mystigurdian.db.Public;
import io.github.yusufsdiscordbot.mystigurdian.db.tables.records.AmountOfKicksRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AmountOfKicks extends TableImpl<AmountOfKicksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.amount_of_kicks</code>
     */
    public static final AmountOfKicks AMOUNT_OF_KICKS = new AmountOfKicks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AmountOfKicksRecord> getRecordType() {
        return AmountOfKicksRecord.class;
    }

    /**
     * The column <code>public.amount_of_kicks.user_id</code>.
     */
    public final TableField<AmountOfKicksRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.amount_of_kicks.guild_id</code>.
     */
    public final TableField<AmountOfKicksRecord, String> GUILD_ID = createField(DSL.name("guild_id"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.amount_of_kicks.id</code>.
     */
    public final TableField<AmountOfKicksRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.amount_of_kicks.amount_of_kicks</code>.
     */
    public final TableField<AmountOfKicksRecord, Integer> AMOUNT_OF_KICKS_ = createField(DSL.name("amount_of_kicks"), SQLDataType.INTEGER, this, "");

    private AmountOfKicks(Name alias, Table<AmountOfKicksRecord> aliased) {
        this(alias, aliased, null);
    }

    private AmountOfKicks(Name alias, Table<AmountOfKicksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.amount_of_kicks</code> table reference
     */
    public AmountOfKicks(String alias) {
        this(DSL.name(alias), AMOUNT_OF_KICKS);
    }

    /**
     * Create an aliased <code>public.amount_of_kicks</code> table reference
     */
    public AmountOfKicks(Name alias) {
        this(alias, AMOUNT_OF_KICKS);
    }

    /**
     * Create a <code>public.amount_of_kicks</code> table reference
     */
    public AmountOfKicks() {
        this(DSL.name("amount_of_kicks"), null);
    }

    public <O extends Record> AmountOfKicks(Table<O> child, ForeignKey<O, AmountOfKicksRecord> key) {
        super(child, key, AMOUNT_OF_KICKS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AmountOfKicksRecord> getPrimaryKey() {
        return Keys.PK_AMOUNT_OF_KICKS;
    }

    @Override
    public List<UniqueKey<AmountOfKicksRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UK_AMOUNT_OF_KICKS);
    }

    @Override
    public AmountOfKicks as(String alias) {
        return new AmountOfKicks(DSL.name(alias), this);
    }

    @Override
    public AmountOfKicks as(Name alias) {
        return new AmountOfKicks(alias, this);
    }

    @Override
    public AmountOfKicks as(Table<?> alias) {
        return new AmountOfKicks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AmountOfKicks rename(String name) {
        return new AmountOfKicks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AmountOfKicks rename(Name name) {
        return new AmountOfKicks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AmountOfKicks rename(Table<?> name) {
        return new AmountOfKicks(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Long, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super Long, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super Long, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
